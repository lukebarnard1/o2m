
Luke Barnard, 5th February 2015

The Server

This part of this package will enable the user to expose their data through a RESTful API. Security is going to remain the main theme - it has to be completely airtight and I have solutions to make this possible.

STEPS TO SHARE MY POSTS

1. There are some posts on my server that are unencrypted in a database.
2. In order to access these posts, my friends will need a password stored by my server that links to them and them alone. Each friend therefore has one password and links it back to access to my server. The fact that they have a certain password proves that it is indeed them.
3. The posts are encrypted in the normal way using HTTPS because all keys are generated by your own computer. 
	a. There are certain things to think about here. If you want, you can share your private keys for connections, giving the possibility of other people intercepting the traffic going TO you. This is dangerous.
	b. People cannot be trusted to key care of their keys. If I have a key to decode someones messages, I can easily give it away to any third party so that that third party can listen in. But what are they listening to?
		i. Let's imagine that I am interested in third parties reading my friends posts. All they need me to do is request for my friend's posts and have them returned to me. The third party can then transparently decrypt these posts without the friend knowing. Why not just ask me for the posts????? There's no point going overboard with security here.
		ii. Could individuals be corrupted into giving their keys away? Without their friends knowing? With thousands of friends, one person could be bought out and earn money for selling the privacy of their incoming connections. This is obviously ridiculous and analogical with a "mole", giving their friends' posts away.
4. The posts are sent and arrive at the other side of the Internet. They are now decrypted using the private key, and a new password is given to the friend for next time - this only protects the password from being used unknowingly by an unwanted party. 
	a. Imagine this scenario. There are three participants in this scenario. A, B and C. A wishes to see B's posts. B gives A a generated password, allowing A to see B's posts. A makes the request and B gives the thumbs up, sending back the data. C in the mean time is trying to see B's posts as well. Let's imagine that C wants to get the password and so C asks A for the password and gets it. There are then three possible cases:
		i. C has requested B's posts with the password BEFORE B has. C makes the request and receives a new password for next time. A then makes a request. The password is wrong, but is known as an old password. B notices this and removes A as a friend, reseting the password for A's access.
			I. C could however give A the newest password after seeing B's posts.
		ii. C has requested B's posts with the password AFTER B has. C now has an old password. B notices this and removes A as a friend, reseting the password for A's access.
			I. A could however give C the newest password after seeing B's posts.
		iii. C uses the password and new passwords forever and A never makes any requests. B cannot tell.